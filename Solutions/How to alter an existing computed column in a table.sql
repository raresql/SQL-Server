--Script Name: How to alter an existing computed column in a table
--Script Type: Solution
--Article: https://raresql.com/2014/03/16/sql-server-how-to-alter-an-existing-computed-column-in-a-table/
--Developed By: Muhammad Imran
--Date Created: 16th March 2014
--Date Modified: 26th Dec 2022

--Sample Problem
--How to alter an existing computed column in a table is usually a trouble making statement because 
--in computed column case we also try to implement a normal alter statement as shown below and end up with the error message.
--Given below is a script for that

--Use temporary database
USE tempdb
GO

--Create Products table
CREATE TABLE dbo.Products
(
    ProductID int IDENTITY (1,1) NOT NULL
  , QtyAvailable smallint
  , UnitPrice money
  , InventoryValue AS QtyAvailable --* UnitPrice
);
GO

--Insert values into the table.
INSERT INTO dbo.Products (QtyAvailable, UnitPrice)
VALUES (25, 2.00), (10, 1.5);
 
--Display the rows in the table.
SELECT ProductID, QtyAvailable, UnitPrice, InventoryValue
FROM dbo.Products;

--ALTER already calculated column
ALTER TABLE dbo.Products
ALTER COLUMN InventoryValue As (QtyAvailable * UnitPrice) 

--The Result will generate an error message

--End of Sample Problem

--Solution

--Example-1
--Use T-SQL

--Use temporary database
USE tempdb
GO

--Alter table statement
ALTER TABLE dbo.Products
DROP COLUMN InventoryValue

--Alter table statement 
ALTER TABLE dbo.Products
ADD InventoryValue AS QtyAvailable * UnitPrice

--Once you drop and recreate the computed column, lets browse and check it again.

--Use temporary database
USE tempdb
GO

--Display the rows in the table.
SELECT ProductID, QtyAvailable, UnitPrice, InventoryValue
FROM dbo.Products;
--OUTPUT

--End of Example-1

--Example-2
--Use default SSMS option

/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
--This is an autogenerated script

BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_Products
    (
    ProductID int NOT NULL IDENTITY (1, 1),
    QtyAvailable smallint NULL,
    UnitPrice money NULL,
    InventoryValue  AS ([QtyAvailable]* [UnitPrice])
    )  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_Products SET (LOCK_ESCALATION = TABLE)
GO
SET IDENTITY_INSERT dbo.Tmp_Products ON
GO
IF EXISTS(SELECT * FROM dbo.Products)
     EXEC('INSERT INTO dbo.Tmp_Products (ProductID, QtyAvailable, UnitPrice)
        SELECT ProductID, QtyAvailable, UnitPrice FROM dbo.Products WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_Products OFF
GO
DROP TABLE dbo.Products
GO
EXECUTE sp_rename N'dbo.Tmp_Products', N'Products', 'OBJECT'
GO
COMMIT

--End of Example-2
--End of solution
